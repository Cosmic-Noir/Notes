SQL - language of relational databases. Two types of statements in SQL:
    -Data Definition - such as creating tables.
    -Data Manipulation - inserting and deleting data from tables. 

To connect to the desired database (second arg is name of database):
    psql postgres

*Note that after this, the prompt changes to postgres=# which indicates you're now connected to a database named "postgres" which is created defaultly.

To see what you're connected to and as who inside postgresql:
    \conninfo 

To see list of roles:
    \du

To create a new role:
    CREATE ROLE <name> WITH <options> ;

To create a role in the normal terminal, which will prompt you for info
    createuser -Pw --interactive

You can then connect to a server as some other role, note that -U means log into a role that you're not currently in:
    psql -U toni 

To remove a role:
    DROP ROLE <name>

Or from normal terimal:
    dropuser toni


To list all databases on the server:
    \l

To create a database:
    CREATE DATABASE <name>

To create a database in the terminal:
    createdb -U <ownerName> <databaseName>

To create and then change to a new database in psql:
    CREATE DATABASE <databaseName>;
    \c <databaseName>

To create a database and assign an owner:
    CREATE DATABASE <databaseName> OWNER <ownerName>

To remove a database:
    DROP DATABASE <databaseName>

To remove database from terminal command:
    dropdb <databaseName>

To create a table, must consider data-type of each column:
    CREATE TABLE <tableName> (
        <name> <data type> (<size>) <options>;
    )

* To create a primary key that automatically increments by 1:
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY

*Data types resource: https://www.postgresql.org/docs/current/datatype.html

* To ensure a column is unique:
    ALTER TABLE articles ADD COLUMN title TEXT UNIQUE NOT NULL;

* To ensure a column is required, use NOT NULL as above

To view the details of a table:
    \d+ <tableName>

    *To exit this view, hit q


To alter the table: 
    ALTER TABLE <tableName> ADD COLUMN <columnDefinition>;

To remove a colunm:
    ALTER TABLE <table name> DROP COLUMN <column name>;

To add a row of data to the table:
    INSERT INTO <table name>
  (<column list>)
  VALUES (<value list>);

To see the data in the table:
    SELECT * FROM <tableName>;

To retrieve data, use the SELECT command:
    SELECT <columnName> FROM <tableName>;

    Ex:
    SELECT title FROM articles WHERE author='Pam Beesly';

To restrict the rows that are returned, use the WHERE clause, where the condition evaluates to a boolean value:
    SELECT <columnName> FROM <tableName> WHERE <condition>

To combine conditions, use AND and OR operators:
    SELECT <columnName> FROM <tableName> WHERE <condition> AND <condition>

ex:
    SELECT product_name, aisle, department FROM products WHERE department = 'bakery' AND aisle = 'bakery desserts';

To use logical operators where there is a column of price:
    SELECT <columnName>, <columnName> FROM <tableName> WHERE department = 'beverages' AND price < 15 AND price > 10;

To remove duplicates from your search results:
    SELECT DISTINCT aisle FROM products;

To COUNT the number of values in a column:
    SELECT COUNT(aisle) FROM products;

To COUNT unique values in a column:
    SELECT COUNT(DISTINCT aisle) FROM products;

To COUNT with conditions:
    SELECT count(*) FROM products WHERE department =  beverages' AND aisle = 'tea' AND price < 15 AND price 10;

To COUNT each value in a specific column, use GROUP BY clause: 
    SELECT <columnName>, count(*) FROM <tableName> GROUP BY <columnName>;

    ex:
    SELECT department, count(*) FROM products GROUP BY department;

To search for a string containing use LIKE operator with %:
    SELECT product_name, price FROM products WHERE department='beverages' AND aisle='tea' AND price < 15 AND price > 10 AND product_name LIKE '%Raspberry%';

To sort in results, use ORDER BY, defautly sorts in ascending :
    SELECT <columnName> FROM <tableName> WHERE <columnValue> = '<value>' ORDER BY <column>;

    ex:
    SELECT product_name, price FROM products WHERE department = 'pets' ORDER BY price;

To sort results in descending order: 
     SELECT <columnName> FROM <tableName> WHERE <columnValue> = '<value>' ORDER BY <column> DESC;

     ex:
    SELECT product_name, price FROM products WHERE department = 'pets' ORDER BY price DESC;


To copy the data in a file and import to your tables:
    \copy products FROM '~/Kristen/products.csv' WITH DELIMITER ',' CSV;

---------------------------------------------

Ex of creating a database to store blog posts, first by craeting a new user with permission to create the database:
    createuser -Pw --interactive

UserName: dunder_mifflin
pass: empty
super: y

create database:
    createdb -U dunder_mifflin blog

Then connect to the database as the owner:
    psql -U dunder_mifflin blog

Create a table:
   CREATE TABLE articles (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title TEXT NOT NULL,
  abstract TEXT NOT NULL,
  tag TEXT DEFAULT 'Paper',
  body TEXT
);
    
Add column for author:
    ALTER TABLE articles ADD COLUMN author TEXT NOT NULL;

Add a row of data:
    INSERT INTO articles
        (title, abstract, author)
        VALUES (
        'Five uses for paper that you never imagined',
        'List five surprising uses for paper that you would not want to discuss with your grandmother',
        'Dwight Schrute'
        );

View data so far:
    SELECT * FROM artciles;

You can write your own .sql script files in text to be run. 

To execute the file, while in psql, type \i ~/path/to/file/customers.sql


Example of a .sql file that creates two tables, one talbe with a custom category that must have a value of one of the ENUM options:

CREATE TABLE IF NOT EXISTS whopipe_video_views (
    view_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    video_name TEXT NOT NULL,
    region TEXT NOT NULL,
    date_viewed TIMESTAMP DEFAULT now() NOT NULL
);

DROP TYPE IF EXISTS department;
CREATE TYPE department AS ENUM (
      'Electronics',
    'Cleaning',
    'Grocery',
    'Furniture',
    'Stationery',
    'Clothing',
    'DIY',
    'Sports',
    'Homeware',
    'Games',
    'Transport'
);

CREATE TABLE IF NOT EXISTS amazong_products (
    product_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,
    price decimal(12,2) NOT NULL,
    image TEXT,
    category department NOT NULL
);


When you want to add testing data to a table, it's called 'seeding'. Can make a file called : seed.some-data.sql. Then use BEGIN and COMMIT statements to enclose one "transaction". Postgres adds these before and after every command. They are like Javascript "try" and "catch" phrases. 

